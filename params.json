{"name":"Electronic Coloring Book On Android","tagline":"","body":"### Electronic Coloring Book On Android\r\nA coloring book is a type of book containing line art to which a reader may add color using crayons, colored pencils, marker pens, paint or other artistic media. Traditional coloring books and coloring pages are printed on paper or card. \r\n\r\nAim of this project is to help children for using their android devices as a coloring book. They can use predefined pages or create their own pages. In order to create own coloring page there are some image processing techniques and libraries used. Canny Edge Detector algorithm is implemented for creating black edge lines. After having lines other parts of picture replaced with transparent layer so when user starts coloring the page he can easily color transparent layer. After finishing coloring result image will be on device’s image gallery.\r\n\r\n## Project Development\r\n\r\nIn this project OpenCV library and Android platform used to implement software. This\r\nproject includes 3 parts.\r\n\r\n1. Processing image taken from device camera\r\n\r\n2. Using input image as coloring page and coloring this page.\r\n\r\n3. Viewing saved pages.\r\n\r\n￼\r\n#1 Processing Image Taken From Device Camera\r\nIn this project user can create his own coloring page by just taking photo via camera. When\r\nuser takes photo image processing starts and converts that photo to color page.\r\n\r\n![](http://i.imgur.com/q1kjwQR.png)\r\n\r\nWhen user clicks “Take Photo” button it will open camera software to capture photo. To do this, in MainActivity.java line 222 there is a code for this.\r\n\r\n` case R.id.btnTakePhoto: {\r\n             currentname = \"\" + System.currentTimeMillis();\r\n             // TO.DO\r\n             folderCamera = new File(Settings.cameraCacheFolderPath); \r\n             if (!folderCamera.exists()) {\r\n                 folderCamera.mkdir(); \r\n             }\r\n             Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE); File f = new File(folderCamera, currentname + \".jpg\"); \r\n             intent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(f)); startActivityForResult(intent, REQUESTCODE_CAMERA);\r\n             break; \r\n         }`\r\n\r\nAfter taking the picture, that picture will be stored in “cameraCacheFolderPath” . When saving photo is done line 362 starts working. Firstly we resize the image because it is so big to process. “prepaireOutputFile(String sourcePath)” this method does this work.\r\n\r\nWhen resizing is done we are ready to apply Canny Edge Detector “In line 404”.  \r\n\r\n`private void applyCannyFilter(final Bitmap bm) {\r\nMat source = new Mat();\r\nout = new Mat();\r\n// Mat out2 = new Mat(); org.opencv.android.Utils.bitmapToMat(bm, source);\r\nImgproc.Canny(source, out, 60, 70); Core.convertScaleAbs(out, out, 10, 0);\r\naddTransparentLayer(bm); }`\r\n\r\nAfter finding edges we will have an image like in Figure 4-3. Now we have to swap white pixels with black ones and black pixels with white ones and at last we will add transparent layer to the image. All of this work is done in “addTransparentLayer(final Bitmap bm)” method.\r\n\r\n`private Mat ￼ (Mat out) { for (int i = 0; i < out.height(); i++) {\r\nfor (int j = 0; j < out.width(); j++) {\r\nout.put(i, j, (out.get(i, j)[0] == 0) ? 255.0 :\r\n0.0);\r\n}\r\n}\r\nreturn out; }`\r\n\r\nThe code above is swapping black and white pixels in the Matrix. It travers over all of the pixels. 0 is black and 255 represents white pixel. Now we have only black lines.\r\n\r\n\r\n![](http://i.imgur.com/6BM4fbo.png)\r\n\r\nNow we have to remove white pixels and add transparent layer to image. To do this first we need to convert matrix to bitmap and apply the following code.\r\n\r\n`out = swapBackAndWhitePixels(out); org.opencv.android.Utils.matToBitmap(out, bm); bm.setHasAlpha(true);\r\nint width = bm.getWidth();\r\nint height = bm.getHeight();\r\nfor (int x = 0; x < width; x++) {\r\nfor (int y = 0; y < height; y++) { int argb = bm.getPixel(x, y); if (argb == Color.WHITE) {\r\n} }`\r\n\r\n\r\nNow our page is ready to save.\r\n\r\n`File folder = new File(Settings.inputFolderPath); if (!folder.exists()) {\r\nfolder.mkdir(); }\r\nFile photoOut = new File(folder + File.separator + currentname + \"_out.png\");\r\ntry {\r\n// TO.DO check for png photoOut.createNewFile(); FileOutputStream ostream = new\r\nFileOutputStream(photoOut); bm.compress(CompressFormat.PNG, 70, ostream); ostream.close();\r\n} catch (IOException e1) { e1.printStackTrace();\r\n} catch (Exception e2) { e2.printStackTrace();\r\n}`\r\n\r\n\r\nAs a result we have coloring page with only black lines. Now we successfully convert photo to coloring page.\r\n\r\n![Before](http://i.imgur.com/rRDwbk5.png)\r\n**Before**\r\n\r\n![After](http://i.imgur.com/Tih2bMX.png)\r\n**After**\r\n\r\n\r\n#2 Coloring Page\r\n\r\nColoring page is implemented in “ColorActivity.java”. This page contains painting area and coloring pallet.\r\n\r\n![Before coloring](http://i.imgur.com/KXSEA5C.png)\r\n\r\n![While Coloring](http://i.imgur.com/vi3hBy8.png)\r\n\r\n\r\nUser can open pallet and easily pick color and brush size. If he wants to clear and restart coloring clear button removes all colors in page. There is an eraser for removing color from page. It is also resizable like the brush.\r\n\r\n![Saving Coloring Page](http://i.imgur.com/7jG1wv5.png)\r\n\r\n\r\nSaved image is accessible from “Saved Pages” screen or Gallery application on the device.\r\n\r\n\r\n#3 Saved Pages\r\n\r\nIn this screen user can see saved coloring pages. She can change picture by just swiping the pages. She can share these pages via mail or social media like facebook and twitter.\r\n\r\n\r\n![Swiping between pages](http://i.imgur.com/ATywYgo.png)\r\n\r\n\r\n![Latest Saved Page](http://i.imgur.com/Q2Zn7Ok.png)\r\n\r\n\r\n##Conclusion\r\n\r\nIn this project, we have given information about Computer Vision, Android mobile software development and OpenCV. We also explained Android Development Environment deeply. Canny Edge Detector is good solution for detecting edges.\r\n\r\nThe problem that I faced in this project is device hardware limitations and unsupported methods in older versions of Android OS. For example setting alpha channel via android is available only Android 4.0 and newer version. Also older phones can’t easily convert images to pages. There were some caching algorithms used for solving this problem.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}